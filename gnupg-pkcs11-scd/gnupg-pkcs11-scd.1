.\"
.\" Copyright (c) 2006-2007 Zeljko Vrba <zvrba@globalnet.hr>
.\" Copyright (c) 2006-2017 Alon Bar-Lev <alon.barlev@gmail.com>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"
.\"     o Redistributions of source code must retain the above copyright notice,
.\"       this list of conditions and the following disclaimer.
.\"     o Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in the
.\"       documentation and/or other materials provided with the distribution.
.\"     o Neither the name of the <ORGANIZATION> nor the names of its
.\"       contributors may be used to endorse or promote products derived from
.\"       this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
.\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd October 15, 2017
.Os POSIX-compatible
.Dt gnupg-pkcs11-scd 1
.Sh NAME
.Nm gnupg-pkcs11-scd
.Nd GnuPG-compatible smart-card daemon with PKCS#11 support
.Sh SYNOPSIS
.Nm gnupg-pkcs11-scd
.Op --server
.Op --multi-server
.Op --daemon
.Op --homedir Ar dir
.Op --uid-acl Ar uid
.Op --verbose
.Op --quiet
.Op --sh
.Op --csh
.Op --options Ar file
.Op --no-detach
.Op --log-file Ar file
.Op --help
.Sh DESCRIPTION
.Nm gnupg-pkcs11-scd
is a drop-in replacement for the smart-card daemon (scd) shipped with the
next-generation GnuPG (gnupg-2). The daemon interfaces to smart-cards
by using RSA Security Inc. PKCS#11 Cryptographic Token Interface (Cryptoki).
.Pp
The interface with GnuPG is restricted to feching existing keys from
the card. Neither new key generation nor key transfer is possible
through this interface. Instead, when the smart-card is asked to
generate a key in a particular slot, the existing public key in that
slot is returned. This facilitates the transfer of keys on the
smart-card to usage as a subkey on an existing GnuPG master key.  See
the GNUPG INTEGRATION section for example usage.
.Pp
The following options are available:
.Bl -tag -width "AA"
.It --server
Run in server mode (foreground). If not redirected, input and output are
over stdin/stdout.
.It --multi-server
Run in multi-server mode (foreground). In addition to communicating over
stdin/stdout, the server also opens an additional listening UNIX socket.
.It --daemon
Detach and run in background.
.It --homedir Ar dir
Use this home directory instead of guessing.
.It --uid-acl Ar uid
Create unix socket as world read/write and apply access control that
accepts only remote processes of this uid. Usable for proxy scenario.
.It --verbose
Be verbose while running.
.It --quiet
Be as quiet as possible.
.It --sh
Output sh-style environment variable definition.
.It --csh
Output csh-style environment variable definition.
.It --options Ar file
Read options from
.Ar file .
Some of the configuration options can only be set in the configuration
file (see the
.Sx CONFIGURATION
section).
.It --no-detach
Do not detach from console (useful for debugging purposes).
.It --log-file Ar file
Output log to
.Ar file .
.It --help
Print help information.
.El
.Pp
When the daemon receives any of the SIGHUP, SIGTERM and SIGINT signals,
it cleans up and exits.
.Pp
.Nm gnupg-pkcs11-scd
works only with
.Em already personalized cards ,
and supports (for the time being) only RSA keypairs.  The following
constraints must be satisfied:
.Pp
.Bl -enum -compact
.It
For each private key object, a certificate object must exist on the card.
The existence of the corresponding public key object is not important
(since the certificate includes public key).
.It
The certificate and the corresponding private key must have identical CKA_ID
attribute.
.El
.Pp
The PKCS#11 implementation is not obliged to enforce any of the above rules.
However, practice has shown that popular PKCS#11 implementations found "in
the wild" seem to respect them.
.Sh NOTES
Unlike gpg-agent,
.Nm gnupg-pkcs11-scd
supports more than one token available
at the same time. In order to make gpg-agent happy,
.Nm gnupg-pkcs11-scd
always returns the same card serial number to gpg-agent.
When unavailable token is requested,
.Nm gnupg-pkcs11-scd
will use NEEDPIN callback in order to ask for the requested token.
When and if gpg-agent will support more than one serial number or NEEDTOKEN
callback, this behavior will be modified.
.Sh ENVIRONMENT
.Bl -tag -width "USERPROFILE" -compact
.It HOME
Used to locate the home directory.
.It GNUPGHOME
Used instead of
.Pa ~/.gnupg .
.It USERPROFILE
Used only on Win32 to locate the home directory.
.It GNUPG_PKCS11_SOCKETDIR
Create sockets in this directory, default to TMPDIR.
.El
.Pp
Additionally, the \\\\Software\\\\GNU\\\\GnuPG\\\\HomeDir registry key is used on
Win32 to locate the default GNUPGHOME.
.Sh FILES
Files affecting the operation of
.Nm gnupg-pkcs11-scd :
.Bl -tag
.It Pa ~/.gnupg/gnupg-pkcs11-scd.conf
.Nm gnupg-pkcs11-scd
uses this as a default configuration file.
.It Pa /etc/gnupg-pkcs11-scd.conf
.Nm gnupg-pkcs11-scd
uses this as a default system wide configuration file.
.It Pa ~/.gnupg/gpg-agent.conf
Default configuration file for gpg-agent.
.El
.Sh CONFIGURATION
To tell gpg-agent to use another smart-card daemon, the following needs to
be put in
.Pa ~/.gnupg/gpg-agent.conf :
.Bd -literal -offset indent
scdaemon-program /usr/bin/gnupg-pkcs11-scd
pinentry-program /usr/bin/pinentry-qt
.Ed
.Pp
The first line is mandatory in order to use
.Nm gnupg-pkcs11-scd .
With the second line you can set your preferred pinentry program (it has to be
one compatible with GnuPG). Of course, you need to adjust the paths according
to your system setup.
.Pp
An example
.Pa ~/.gnupg/gnupg-pkcs11-scd.conf
file (lines beginning with # are comments):
.Bd -literal -offset indent
# Log file.
#log-file log1

# Default is not verbose.
#verbose

# Default is no debugging.
#debug-all

# Pin cache period in seconds; default is infinite.
#pin-cache 20

# Comma-separated list of available provider names. Then set
# attributes for each provider using the provider-[name]-attribute
# syntax.
providers p1

# Provider attributes (see below for detailed description)
provider-p1-library /usr/lib/pkcs11/p1.so
#provider-p1-allow-protected-auth
#provider-p1-cert-private
#provider-p1-private-mask 0

# The following are for gnupg-2.0 mode
#openpgp-sign 5C661B8C07CFD957F7D98D5B9A0F31D236BFAC2A
#openpgp-encr D2DC0BD1EDD185969748B6025B452816F97CBA57
#openpgp-auth A7B8C1A3A8F71FCEC018886F8767927B9C8D871F
.Ed
.Pp
The following attributes can be set for each provider:
.Bl -tag -width "AA"
.It library
Full path to the PKCS#11 shared library (= provider).
.It allow-protected-auth
Allow protected authentication for provider. This needs to be supported by
the provider and you should have appropriate reader hardware.
.It cert-private
Authentication is required before certificates can be accessed. Most
configurations store certificates as public, so there is no need to use this
option.
.It private-mask
Private key mask mode. Use this only when you have problem using
private key operations. The value is hex encoded mask number.
.Bl -tag -width "RECOVER" -compact
.It 0
Determine automatically.
.It 1
Force sign.
.It 2
Force sign with recovery.
.It 4
Force decrypt.
.It 8
Force decrypt with unwrap.
.El
.It openpgp-sign
[gnupg-2.0] Hex string (Upper letter, no space) SHA1 of signing public key see
GNUPG INTEGRATION how to obtain.
.It openpgp-encr
[gnupg-2.0] Hex string (Upper letter, no space) SHA1 of encryption public key see
GNUPG INTEGRATION how to obtain.
.It openpgp-auth
[gnupg-2.0] Hex string (Upper letter, no space) SHA1 of authentication public key see
GNUPG INTEGRATION how to obtain.
.El
.Sh GNUPG INTEGRATION
Typical steps to set up a card for gpgsm usage:
.Bl -enum
.It
Import the CA certificate of your issuer:
.Dl gpgsm --import < ca-certificate
You should also manually import all self-signed certificates.
.It
Instruct GnuPG to discover all useful certificates on the card:
.Dl gpgsm --learn-card
.El
.Pp
Signing, verification, etc. work as usual with gpgsm.
.Pp
Typical steps to set up a card for gpg-2.0 usage:
.Bl -enum
.It
Acquire key ids:
.Dl gpg-agent --server gpg-connect-agent
Enter "SCD LEARN" and look for "KEY-FRIEDNLY" responses, the first field is the hash, the second
is the subject name.
.It
Instruct GnuPG to discover all useful information of card:
.Dl gpg --card-status
You should see valid card status.
.It
Now, you should virtual generate keys, the keys are not actually generated, but returned
to gpg to be registered.
.Dl gpg --card-edit
.Dl admin
.Dl generate (DO NOT BACKUP KEYS)
Kill gpg-agent and modify configuration to have sign, encrypt, authenticate key hex ids.
.It
Alternatively, you can add the existing keys as subkeys on an existing
GPG master key:
.Dl gpg --edit-key MASTER_KEY_ID
.Dl addcardkey
.It
In order to reattach a key to smartcard, remove secret key using:
.Dl gpg --delete-secret-keys KEY_ID
Then regenerate but without replace keys using:
.Dl gpg --card-edit
.Dl admin
.Dl generate (DO NOT GENERATE KEYS)
.El
.Pp
Signing, verification, etc. work as usual with gpg.
.Pp
Typical steps to set up a card for >=gpg-2.1.19 usage:
.Bl -enum
.It
Refresh local key store:
.Dl gpg --card-status
.It
Acquire key ids:
.Dl gpg-agent --server gpg-connect-agent
Enter "SCD LEARN" and look for "KEY-FRIEDNLY" responses, the first field is the keygrip, the second
is the subject name.
.It
Create master key based on existing key using:
.Dl gpg --expert --full-generate-key
Select:
.Dl (13) Existing key
Enter keygrip to be used as primary key.
.It
Continue as usual to setup your primary key, you should
probably use signature for master key.
.It
Add subkey using:
.Dl gpg --expert --edit-key ${MASTER_KEY_ID}
.Dl gpg> addkey
.Dl (13) Existing key
Enter keygrip to be used as subkey.
.It
Continue as usual to setup your subkey.
.El
.Pp
Signing, verification, etc. work as usual with gpg.
.Sh SECURITY CONSIDERATIONS
All communication between components is currently unprotected and in plain
text (that's how the Assuan protocol operates). It is trivial to trace (using
e.g. the
.Xr strace 1
program) individual components (e.g. pinentry) and steal sensitive data (such
as the smart-card PIN) or even change it (e.g. the hash to be signed).
.Pp
When using the software in production scenario,
.Sy be sure to turn off debugging/verbose options
in configuration of all components. Otherwise, some sensitive data might be
displayed on the screen (most notably, the PIN).
.Sh SEE ALSO
.Xr strace 1
.Xr truss 1
.Xr gnupg 7
.Rs
.%T "GnuPG Home Page"
.%O http://www.gnupg.org
.Re
.Rs
.%T "gnupg-pkcs11 Home Page"
.%O http://gnupg-pkcs11.sourceforge.net
.Re
.Sh AUTHORS AND COPYRIGHT
Copyright (c) 2006-2007 Zeljko Vrba <zvrba@globalnet.hr>
.Pp
Copyright (c) 2006-2017 Alon Bar-Lev <alon.barlev@gmail.com>
.Pp
All rights reserved.
.Pp
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
